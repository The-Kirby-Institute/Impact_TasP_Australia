---
title: "Impact of U=U in Australia (skeleton)"
# date: Current draft produced `r format(Sys.Date(), format="%B %d, %Y")`.
author:
  - Richard T. Gray # PhD:
      # email: Rgray@kirby.unsw.edu.au
      # institute: [KI]
      # correspondence: true
# institute: 
#    - KI: 
#       name: The Kirby Institute, UNSW Sydney, Sydney NSW 2052, Australia
#       address: Level 6, Wallace Wurth Building High Street, UNSW Sydney Kensington NSW 2052
format:
  docx:
    reference-doc: "C:/Users/rgray/OneDrive - UNSW/R/LeftysRstuff/Rmarkdown/mystyles_Paper.docx"
    number-sections: false
    page-width: 8.25
    filters: 
      # - pagebreak.lua
      # - scholarly-metadata.lua
      # - author-info-blocks.lua
      - C:/Users/rgray/OneDrive - UNSW/R/LeftysRstuff/Rmarkdown/filters/pagebreak.lua
      - C:/Users/rgray/OneDrive - UNSW/R/LeftysRstuff/Rmarkdown/filters/scholarly-metadata.lua
      - C:/Users/rgray/OneDrive - UNSW/R/LeftysRstuff/Rmarkdown/filters/author-info-blocks.lua
      
editor: visual
execute:
  include: false
  echo: false
  warning: false
  message: false
editor_options:
  markdown:
    wrap: 80
  canonical: true
# bibliography: references.bib
---

<!--- Frontmatter that I can't put into Yaml (as far as I can tell) --->

The Kirby Institute, UNSW Sydney, Sydney, NSW, Australia.

Current draft produced `r format(Sys.Date(), format="%B %d, %Y")`.

**Manuscript details**

-   Word count abstract:
-   Word count main text:
-   References:
-   Figures:
-   Tables:

Skeleton of the Impact of U=U paper. Only a simple model is used so this Quarto
document contains the code and results generation. Things that need to be fixed
in the corresponding Word document are in bold. References are not added here
but the locations for references are in bold.

<!--- The following code chunks set up the model and results generation for the paper--->

```{r Set-up}
# Open as a project (setting working directory to source and restarting R)

# Load standard libraries and options
library(tidyverse)
library(LeftysRpkg)
library(captioner)
library(knitr)

# Set-up directories
basePath <- getwd() 
resultsFolder <- file.path(basePath, "output")

# Set-up overarching variables 
currTime <- format(Sys.time(), "%y-%m-%d_%H-%M-%S") # for appending to 
# output files
```

```{r Simulation specification parameters}
# User inputs for running code. Defaults are to run everything from scratch. 

# Specifications for loading previously generated results or saving results
# to file. The basic format of a file string is: currTime_saveFileTag.Rda 

# The defaults are set to FALSE and the user has to manually specify the file 
# to load. This is set up so long simulation runs do not need to be repeated.

# Manually enter file name tag to regenerate old results
loadFileTag <-  NULL # set to NULL to run things from scratch

if (is.null(loadFileTag)) {
    # Set to default values 
    loadProject <- FALSE    # set to FALSE to run things a fresh.
    loadParameters <- FALSE # set to FALSE to reload and re-generate parameter sets
    loadResults <- FALSE    # set to FALSE to generate new results 
    
    useSeed <- FALSE        # set to FALSE to create new seed for generating results
    
    saveProject <- TRUE    # save project, parameters, and results files
    
} else {
    ######################################################
    # Manually specify values to re-generate what you want
    ######################################################
    
    # If any of the following are TRUE the corresponding project and results files
    # need to exist. 
    loadProject <- FALSE    # Set to TRUE to load in project specifications
    loadParameters <- FALSE # Set to TRUE to load in parameters and parameter sets
    loadResults <- FALSE    # Set to TRUE to load in results
    
    useSeed <- FALSE  # Set to true to use seed in project file else create new one  
    
    saveProject <- TRUE    # save project, parameters, and results files
    
}

# Store specifications in a list
simSpecs <- tibble::lst(loadFileTag, loadProject, loadParameters, loadResults, 
    useSeed, saveProject)

```

```{r User specified analysis variables}

###################################
# User specified analysis variables
###################################

# Depending on value of loadProject enter specifications for the analysis

if (!loadProject) {
    # If not loading from previously created file specify analysis inputs for 
    # running the calculations
    
    name <- "Impact_TasP_Australia-Testing" 
    saveFileTag <- "Testing"
    
    startYear <- 2010 
    endYear <- 2019      
    
    numsims <- 1000      # number of sampled parameter sets to run
    
    # Generate and store a random integer for set.seed so we can rerun 
    # things exactly if we want to
    currseed <- sample(1:10^6, 1)
    set.seed(currseed)
    
    projectVars <- tibble::lst(name, saveFileTag, startYear, endYear, numsims, 
        currseed)
    
} else {
    # Load previously generated project â€” to do this we need to save current 
    # simSpecs from the previous chunk and then restored because they we be over 
    # written when loading the project 
    
    oldSimSpecs <- simSpecs
    
    load(paste0(loadFileTag, ".Rda"))
    
    simSpecs <- oldSimSpecs
    
}

#-------------------------------------------------------------------------------
# Save all final analysis specifications in a list 
project <- tibble::lst(currTime, simSpecs, projectVars)

```

```{r Parameters set-up}

```

```{r Analysis functions}

```

```{r Run simulations}

```

```{r Analyse results and generate plots}

```

```{r Save project and output}

```


