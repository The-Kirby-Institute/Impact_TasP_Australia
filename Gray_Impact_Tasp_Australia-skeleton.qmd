---
title: "Impact of U=U in Australia (skeleton)"
# date: Current draft produced `r format(Sys.Date(), format="%B %d, %Y")`.
author:
  - Richard T. Gray # PhD:
      # email: Rgray@kirby.unsw.edu.au
      # institute: [KI]
      # correspondence: true
# institute: 
#    - KI: 
#       name: The Kirby Institute, UNSW Sydney, Sydney NSW 2052, Australia
#       address: Level 6, Wallace Wurth Building High Street, UNSW Sydney Kensington NSW 2052
format:
  docx:
    reference-doc: "C:/Users/rgray/OneDrive - UNSW/R/LeftysRstuff/Rmarkdown/mystyles_Paper.docx"
    number-sections: false
    page-width: 8.25
    filters: 
      # - pagebreak.lua
      # - scholarly-metadata.lua
      # - author-info-blocks.lua
      - C:/Users/rgray/OneDrive - UNSW/R/LeftysRstuff/Rmarkdown/filters/pagebreak.lua
      - C:/Users/rgray/OneDrive - UNSW/R/LeftysRstuff/Rmarkdown/filters/scholarly-metadata.lua
      - C:/Users/rgray/OneDrive - UNSW/R/LeftysRstuff/Rmarkdown/filters/author-info-blocks.lua
      
editor: visual
execute:
  include: false
  echo: false
  warning: false
  message: false
editor_options:
  markdown:
    wrap: 80
  canonical: true
# bibliography: references.bib
---

<!--- Frontmatter that I can't put into Yaml (as far as I can tell) --->

The Kirby Institute, UNSW Sydney, Sydney, NSW, Australia.

Current draft produced `r format(Sys.Date(), format="%B %d, %Y")`.

**Manuscript details**

-   Word count abstract:
-   Word count main text:
-   References:
-   Figures:
-   Tables:

Skeleton of the Impact of U=U paper. Only a simple model is used so this Quarto
document contains the code and results generation. Things that need to be fixed
in the corresponding Word document are in bold. References are not added here
but the locations for references are in bold.

<!--- The following code chunks set up the model and results generation for the paper--->

```{r Set-up}
# Open as a project (setting working directory to source and restarting R)

# Load standard libraries and options
library(tidyverse)
library(LeftysRpkg)
library(captioner)
library(knitr)

# Set-up directories
basePath <- getwd() 
dataFolder <- file.path(basePath, "data")
resultsFolder <- file.path(basePath, "output")

# Set-up overarching variables 
currTime <- format(Sys.time(), "%y-%m-%d_%H-%M-%S") # for appending to 
# output files
```

```{r Simulation specification parameters}
# User inputs for running code. Defaults are to run everything from scratch. 

# Specifications for loading previously generated results or saving results
# to file. The basic format of a file string is: currTime_saveFileTag.Rda 

# The defaults are set to FALSE and the user has to manually specify the file 
# to load. This is set up so long simulation runs do not need to be repeated.

# Manually enter file name tag to regenerate old results
loadFileTag <-  NULL #"23-02-27_22-08-14_Impact_Tasp" # set to NULL to run things from scratch

if (is.null(loadFileTag)) {
  # Set to default values 
  loadProject <- FALSE    # set to FALSE to run things a fresh.
  loadParameters <- FALSE # set to FALSE to reload and re-generate parameter sets
  loadResults <- FALSE    # set to FALSE to generate new results 
  
  useSeed <- FALSE        # set to FALSE to create new seed for generating results
  
  saveProject <- TRUE    # save project, parameters, and results files
  
} else {
  
  # Manually specify values to re-generate what you want------------------------
  
  # If any of the following are TRUE the corresponding project and results files
  # need to exist. 
  loadProject <- TRUE    # Set to TRUE to load in project specifications
  loadParameters <- TRUE # Set to TRUE to load in parameters and parameter sets
  loadResults <- TRUE    # Set to TRUE to load in results
  
  loadParameters <- ifelse(!loadProject, FALSE, loadParameters)
  loadResults <- ifelse(!loadProject, FALSE, loadResults)
  
  useSeed <- TRUE  # Set to true to use seed in project file else create new one  
  
  saveProject <- TRUE    # save project, parameters, and results files
  
}

# Store specifications in a list
simSpecs <- tibble::lst(loadFileTag, loadProject, loadParameters, loadResults, 
  useSeed, saveProject)

```

```{r User specified analysis variables}

# User specified analysis variables---------------------------------------------

# Depending on value of loadProject enter specifications for the analysis

if (!loadProject) {
  # If not loading from previously created file specify analysis inputs for 
  # running the calculations
  
  name <- "Impact_TasP_Australia-Testing" 
  saveFileTag <- "Impact_Tasp"
  
  startYear <- 2009 
  endYear <- 2019  
  
  indexYearART <- 2010 # Year ART is held fixed for counter-factual scenario
  
  years <- startYear:endYear
  nyears <- length(years)
  
  numsims <- 1000 # number of sampled parameter sets to run
  # Set to 0 or 1 to just do best fit parameters
  # Recommended for initial sims to make sure things work
  
  # Generate and store a random integer for set.seed so we can rerun 
  # things exactly if we want to
  currseed <- sample(1:10^6, 1)
  set.seed(currseed)
  
  projectVars <- tibble::lst(name, saveFileTag, startYear, endYear,
    indexYearART, years, nyears, numsims, currseed)
  
  # Create parameter csv files if they don't already exist - if created they are
  # empty for user to input values
  if (!file.exists(file.path(resultsFolder, paste0(saveFileTag, 
    "_parameters_fixed.csv")))){
    
    paramsVector <- c(
      "effart" = "Effectiveness of ART", 
      "effprep" = "Effectiveness of PrEP", 
      "effcondom" = "Effectiveness of condom use",
      "annual_cost" = "Annual care and treatment cost",
      "lifetime_cost_0d" = "Lifetime care and treatment cost (0% discounting)", 
      "lifetime_cost_35d" = "Lifetime care and treatment cost (3.5% discounting)",
      "lifetime_cost_50d" = "Lifetime care and treatment cost (5.0% discounting)",
      "plhiv_range" = "Range in PLHIV estimates",
      "prop_leave_range" = "Range in the percentage who leave", 
      "prop_diagnosed_range" = "Range in proportion diagnosed", 
      "prop_art_range" = "Range in ART coverage",
      "prop_vs_range" = "Range in viral suppression estimates",
      "prop_prep_range" = "Range in PrEP coverage",
      "prop_condom_range" = "Range in condom use",
      "diagnosed_os_range" = "Range in diagnoses from overseas", 
      "diagnoses_range" = "Range in diagnoses",
      "inflation_index_factor" = "Inflation index factor (adjustment of annual CPI)", 
    ) 
    
    paramsFixed <- tibble(
      parameter = unname(paramsVector),
      estimate = rep('', length(paramsVector)),
      lower = rep('', length(paramsVector)),
      upper = rep('', length(paramsVector)),
      code_variable = names(paramsVector), 
      notes = rep('', length(paramsVector)), 
    )
    
    write_csv(paramsFixed , file.path(resultsFolder, paste0(saveFileTag, 
      "_parameters_fixed.csv")))
    
    # Now do time varying file
    paramsTime <- tibble(
      year = years,
      plhiv = rep('', nyears), 
      prop_leave = rep('', nyears), 
      prop_diagnosed = rep('', nyears),
      prop_art = rep('', nyears),
      prop_vs = rep('', nyears),
      prop_prep = rep('', nyears),
      prop_condoms = rep('', nyears),
      diagnosed_os = rep('', nyears),
      diagoses = rep('', nyears),
      inflation = rep('', nyears)
    )
    
    write_csv(paramsTime, file.path(resultsFolder, paste0(saveFileTag, 
      "_parameters_variable.csv")))
    
  }
  
  # Save all final analysis specifications in a list -----------------------------
  project <- tibble::lst(currTime, simSpecs, projectVars)
  
  if (saveProject) {
    save(project, file = file.path(resultsFolder, paste0(currTime, "_", saveFileTag, "_project.Rda")))
  }
  
} else {
  # Load previously generated project â€” to do this we need to save current 
  # simSpecs from the previous chunk and then restore them because they will be 
  # over written when loading the project 
  
  oldSimSpecs <- simSpecs
  
  load(file.path(resultsFolder, paste0(loadFileTag, "_project.Rda")))
  
  simSpecs <- oldSimSpecs
  project$simSpecs <- simSpecs
  
  if (useSeed) {
    # Reset seed 
    set.seed(currseed)
  } else {
    # Generate a new one
    currseed <- sample(1:10^6, 1)
    set.seed(currseed)
  }
  
}

```

```{r Useful functions}
# This chunk sources useful functions for the set-up and analysis

# Functions to create cumulative inflation indices for each year
IndexCPI <- function(cpi) {
  
  n <- length(cpi)
  index <- rep(1, n)
  
  for (ii in 1:(n-1)) {
    index[ii] = 
      prod(cpi[ii:(n-1)])
  }
  
  return(index)
  
}  

# Function to adjust inflation by an overall factor
MultiplyCPI <- function(cpiIndex, factor) {
  return(factor*(cpiIndex)-1 )
}

```

```{r Parameters set-up}
# This chunk reads in the parameter input files and coverts them into parameter 
# sets for input into the model simulations

# TODO: Decide if we need beta distributions. Currently just using uniform 
# distributions for sampling.  

if (!loadParameters) {
  
  # Read in parameter files
  parametersFixed <- read_csv(file.path(resultsFolder, paste0(saveFileTag, 
    "_parameters_fixed.csv")))
  parametersVar <- read_csv(file.path(resultsFolder, paste0(saveFileTag, 
    "_parameters_variable.csv")))
  
  # Set-up best fit parameters -------------------------------------------------
  paramsBest <- parametersFixed %>%
    select(code_variable, estimate) %>%
    # Only need these parameters for the model the others are for setting up
    # parameter sets
    filter(code_variable %in% c("effart", "effprep", "effcondom", "annual_cost",
      "lifetime_cost_0d", "lifetime_cost_35d", "lifetime_cost_50d")) %>%
    spread(code_variable, estimate) %>%
    slice(rep(row_number(), nyears)) %>%
    bind_cols(parametersVar) %>%
    mutate(simset = 1) %>%
    select(simset, year, everything())
  
  # Set-up best fit costing vectors 
  costingsBest <- paramsBest %>% 
    select(year, inflation_index, annual_cost, lifetime_cost_0d, 
      lifetime_cost_35d, lifetime_cost_50d) %>%
    mutate(cumulative_index = IndexCPI(inflation_index),
      cumulative_index2 = IndexCPI(MultiplyCPI(inflation_index, 2))) %>%
    mutate(ac_adjusted = cumulative_index * annual_cost,
      lc0_adjusted = cumulative_index *  lifetime_cost_0d, 
      lc35_adjusted = cumulative_index *  lifetime_cost_35d,
      lc50_adjusted = cumulative_index *  lifetime_cost_50d,
      ac_adjusted2 = cumulative_index2 * annual_cost,
      lc0_adjusted2 = cumulative_index2 *  lifetime_cost_0d, 
      lc35_adjusted2 = cumulative_index2 *  lifetime_cost_35d,
      lc50_adjusted2 = cumulative_index2 *  lifetime_cost_50d)
  
  # Generate parameter sets for all simulations --------------------------------
  paramsSets <- list()
  costingSets <- list()
  
  if (numsims > 1) {
    
    # Parameters that are not sampled
    paramsFixed <- c("inflation_index")
    
    # Separate the parameters into two sets those that are inputs in the 
    # model and those that are used to produce uncertainty in the time series 
    # variables. The time series variables need to be sampled twice for the
    # start and end of the time series. 
    params2sampleOnce <- c("effart", "effprep", "effcondom", "annual_cost",
      "lifetime_cost_0d", "lifetime_cost_35d", "lifetime_cost_50d", 
      "inflation_index_factor")
    params2sampletwice <- c("plhiv", "prop_leave", "prop_diagnosed", "prop_art", 
      "prop_vs", "prop_prep", "prop_condom", "diagnosed_os", "diagnoses") 
    
    paramsSets[["simset"]] <- rep(1:numsims, each = nyears)
    paramsSets[["year"]] <- rep(years, numsims)
    
    # Fixed parameters
    for (var in params2sampleOnce) {
      # Sample from parameter range and duplicate across years
      temp <- runif(numsims,(parametersFixed %>% filter(code_variable == var))$lower, 
        (parametersFixed %>% filter(code_variable == var))$upper) 
      temp <- rep(temp, each = nyears)
      
      paramsSets[[var]] <- temp
    }
    
    # Time varying parameters - sampled from multiplicative factor range at each 
    # end and then connect linearly to change the best estimate values.  
    for (var in params2sampletwice) {
      
      tempStart <-  runif(numsims,(parametersFixed %>% 
          filter(code_variable == paste0(var, "_range")))$lower, 
        (parametersFixed %>% filter(code_variable == paste0(var,"_range")))$upper)
      tempEnd <- runif(numsims,(parametersFixed %>% 
          filter(code_variable == paste0(var, "_range")))$lower, 
        (parametersFixed %>% filter(code_variable == paste0(var, "_range")))$upper)
      
      # Update best estimate using sampled multiplicative factors for each sim
      varVector <- vector()
      for (ii in 1:numsims) {
        
        varVector <- c(varVector, seq(tempStart[ii], tempEnd[ii], length = nyears) *
            parametersVar[[var]])
        
        paramsSets[[var]] <- varVector
        
      }
    }
    
    for (var in paramsFixed) {
      paramsSets[[var]] <- rep(parametersVar[[var]], numsims)
    }
    
    # Convert to tibble
    paramsSets <- as_tibble(paramsSets)
    
    # Generate costing sets for all simulations 
    for (ii in 1:numsims) {
      tempParams <- paramsSets %>% filter(simset == ii)
      
      tempCosts <- tempParams  %>% 
        select(simset, year, inflation_index, annual_cost, lifetime_cost_0d, 
          lifetime_cost_35d, lifetime_cost_50d) %>%
        mutate(cumulative_index = IndexCPI(inflation_index),
          cumulative_index2 = IndexCPI(MultiplyCPI(inflation_index, 2))) %>%
        mutate(ac_adjusted = cumulative_index * annual_cost,
          lc0_adjusted = cumulative_index *  lifetime_cost_0d, 
          lc35_adjusted = cumulative_index *  lifetime_cost_35d,
          lc50_adjusted = cumulative_index *  lifetime_cost_50d,
          ac_adjusted2 = cumulative_index2 * annual_cost,
          lc0_adjusted2 = cumulative_index2 *  lifetime_cost_0d, 
          lc35_adjusted2 = cumulative_index2 *  lifetime_cost_35d,
          lc50_adjusted2 = cumulative_index2 *  lifetime_cost_50d)
      
      costingSets <- bind_rows(costingSets, tempCosts)
      
    }
} # Else paramsSets and costingSets are NULL

# Save parameters in a separate file
if (saveProject) {
  save(paramsBest, paramsSets, costingsBest, costingSets, 
    file = file.path(resultsFolder, 
      paste0(currTime, "_", saveFileTag, "_parameters.Rda")))
}

} else {
  # Load parmaeter sets from file - paramsBest, paramsSets
  load(file.path(resultsFolder, paste0(loadFileTag, "_parameters.Rda")))
}

```

```{r Analysis functions}
# This functions and the key functions used for the analysis. 

# Mian function ----------------------------------------------------------------
# This is the main function for the analysis calculating the number of new
# infections for a given year from the input data
NewInfections <- function(plhiv, beta, propdiag, propart, propvs, effart, 
  propprep, effprep, condom0, condomt, effcondom) {
  
  return(plhiv * beta *(1 - propdiag * propart*propvs*effart) * 
      (1 - propprep * effprep) * (1 - effcondom * condomt) / 
      (1 - effcondom * condom0))
}

# Beta calculation function ----------------------------------------------------
# Define a function to calculate beta given a new infections estimate and other 
# parameter values. This is used at the initial time point using available data
# for the starting year (startYear). This values of beta is than used in the
# simulations. 

Beta <- function(incidence, plhiv, propdiag, propart, propvs, effart, propprep, 
  effprep){
  return(incidence / (plhiv * (1 - propdiag * propart * propvs * effart) * 
      (1 - propprep * effprep)))
}

# Simulation function ----------------------------------------------------------

simulate <- function(numyears, paramsDf) {
  
  # Initialize results variables
  infected <- rep(0, numyears)
  newInfects <- rep(0, numyears)
  diagnosed <- rep(0, numyears)
  numArt <- rep(0, numyears)
  
  infected[1] <- paramsDf$plhiv[1] 
  newInfects[1] <- paramsDf$diagnoses[1]
  diagnosed[1] <- infected[1] * paramsDf$prop_diagnosed[1]
  numArt[1] <- diagnosed[1] * paramsDf$prop_art[1]
  
  betaValue <- Beta(newInfects[1], infected[1], paramsDf$prop_diagnosed[1],
    paramsDf$prop_art[1], paramsDf$prop_vs[1], paramsDf$effart[1],
    paramsDf$prop_prep[1], paramsDf$effprep[1])
  
  for (ii in 2:numyears) {
    
    infected[ii] <- infected[ii-1]  + newInfects[ii-1] + paramsDf$diagnosed_os[ii]
    
    newInfects[ii] <- NewInfections(infected[ii], betaValue, paramsDf$prop_diagnosed[ii],
      paramsDf$prop_art[ii], paramsDf$prop_vs[ii], paramsDf$effart[ii], 
      paramsDf$prop_prep[ii], paramsDf$effprep[ii], 
      paramsDf$prop_condom[1], paramsDf$prop_condom[ii], 
      paramsDf$effcondom[ii])
    
    diagnosed[ii] <- infected[ii] * paramsDf$prop_diagnosed[ii]
    numArt[ii] <- diagnosed[ii] * paramsDf$prop_art[ii]
  }
  
  results <- tibble(
    infected = infected,
    newInfects = newInfects,
    diagnosed = diagnosed,
    numArt = numArt)
  
  return(results)
}

```

```{r Run simulations - baseline}

if (!loadResults) {
  
  # Best estimate results --------------------------------------------------------
  
  resultsBest <- simulate(nyears, paramsBest) %>%
    mutate(year = years) %>%
    select(year, everything())
  
  # Simulation sets results ------------------------------------------------------
  
  resultsSims <- tibble()
  
  if (numsims > 1) {
    
    for (ii in 1:numsims) {
      
      paramsSim <- paramsSets %>% filter(simset == ii)
      
      resultsSim <- simulate(nyears, paramsSim) %>% 
        mutate(simset = ii, year = years) %>%
        select(simset, year, everything())
      
      resultsSims <- resultsSims %>% bind_rows(resultsSim)
      
    }
  }
  
  # Save parameters in a separate file
  if (saveProject) {
    save(resultsBest, resultsSims, file = file.path(resultsFolder, 
      paste0(currTime, "_", saveFileTag, "_results.Rda")))
  }
  
} else {
  # Load results from file - resultsBest, resultsSims
  load(file.path(resultsFolder, paste0(loadFileTag, "_results.Rda")))
  
}

```

```{r Plot specifications}

# Choose some colours for plotting
dput(PlotColors("crayons")[c("Black", "Gray", "Blue", "Cornflower", "Red", "Melon")])

plotcols <- c(Black = "#000000", Gray = "#95918c", Blue = "#1f75fe", 
  Cornflower = "#9aceeb", Red = "#ee204d", Melon = "#fdbcb4")

# Function to extract hex values
pc <- function(col) unname(plotcols[col])

```

```{r Validation}
# Compare the baseline results to available data - plot of plhiv and diagnoses 
# vs new infections

# Extract results --------------------------------------------------------------
validationData <- paramsBest %>% select(year, plhiv, diagnoses)

plhivPlot <- ggplot(data = resultsSims, aes(x = year, y = infected, group = simset)) + 
  geom_line(aes(colour = "sims")) +
  geom_line(data = resultsBest, aes(group = 1, colour = "best")) +
  geom_point(data = validationData, aes(y = plhiv, group = 1, color = "data")) +
  expand_limits(y = c(0, NA)) + 
  scale_x_continuous(breaks = seq(2009, 2019, by = 2)) + 
  scale_colour_manual(name = "", 
    breaks = c("data", "best", "sims"), 
    values = c(pc("Black"), pc("Blue"), pc("Cornflower")),
    labels = c("HIV cascade results","Best estimate", "Simulation range")) +
  xlab("Year") + ylab("Number of people with HIV") + 
  PlotOptions()

plhivPlot

infectionsPlot <- ggplot(data = resultsSims, aes(x = year, y = newInfects, group = simset)) + 
  geom_line(aes(colour = "sims")) +
  geom_line(data = resultsBest, aes(group = 1, colour = "best")) +
  geom_point(data = validationData, aes(y = diagnoses, group = 1, color = "data")) +
  expand_limits(y = c(0, NA)) + 
  scale_x_continuous(breaks = seq(2009, 2019, by = 2)) + 
  scale_colour_manual(name = "", 
    breaks = c("data", "best", "sims"), 
    values = c(pc("Black"), pc("Blue"), pc("Cornflower")),
    labels = c("New diagnoses","Best estimate", "Simulation range")) +
  xlab("Year") + ylab("Annual HIV infections") + 
  PlotOptions()

infectionsPlot

# TODO: save plots as PNG and append to results??

```

```{r Run simulations - scenario}

# Produce and run a scenario where the prop on ART remained at the 2010 level

if (!loadResults) {
  
  scenarioBest <- paramsBest %>%
    mutate(prop_art = ifelse(year > indexYearART, 
      filter(., year == indexYearART)$prop_art, prop_art))
  
  # Best estimate scenario results ---------------------------------------------
  resultsScenarioBest <- simulate(nyears, scenarioBest) %>%
    mutate(year = years) %>%
    select(year, everything())
  
  # Simulation set scenario results --------------------------------------------
  
  resultsScenarioSims <- tibble()
  
  if (numsims > 1) {
    
    for (ii in 1:numsims) {
      
      ScenarioSim <- paramsSets %>% filter(simset == ii) %>%
        mutate(prop_art = ifelse(year > indexYearART, 
          filter(., year == indexYearART)$prop_art, prop_art))
      
      resultsScenarioSim <- simulate(nyears, ScenarioSim) %>% 
        mutate(simset = ii, year = years) %>%
        select(simset, year, everything())
      
      resultsScenarioSims <- resultsScenarioSims %>% bind_rows(resultsScenarioSim)
      
    }
  }
  
  # Save parameters in a separate file
  if (saveProject) {
    save(resultsBest, resultsSims, resultsScenarioBest, resultsScenarioSims, 
      file = file.path(resultsFolder, paste0(currTime, "_", saveFileTag, 
        "_results.Rda")))
  }
  
} else {
  # Load results from file - resultsBest, resultsSims, 
  # resultsScenarioBest, resultsScenarioSims
  load(file.path(resultsFolder, paste0(loadFileTag, "_results.Rda")))
}

```

```{r Analyse results and generate plots}

# Organize results for plotting ------------------------------------------------
scenarioResultsBest <- (resultsBest %>% mutate(scenario = "base")) %>%
  bind_rows(resultsScenarioBest %>% mutate(scenario = "scenario")) %>%
  select(scenario, year, everything())

scenarioResultsSims <- (resultsSims %>% mutate(scenario = "base")) %>%
  bind_rows(resultsScenarioSims %>% mutate(scenario = "scenario")) %>%
  select(scenario, simset, year, everything())

resultsPlhiv <- ggplot(data = scenarioResultsSims, aes(x = year, y = infected, 
  colour = scenario, group = interaction(scenario, simset))) + 
  geom_line() + 
  geom_line(data = (scenarioResultsBest %>% filter(scenario == "base")), 
    aes(group = 1), colour = pc("Blue")) +
  geom_line(data = (scenarioResultsBest %>% filter(scenario == "scenario")), 
    aes(group = 1), colour = pc("Black")) +
  expand_limits(y = c(0, NA)) + 
  scale_x_continuous(breaks = seq(2009, 2019, by = 2)) + 
  scale_colour_manual(name = "", 
    breaks = c("base", "scenario"), 
    values = c(pc("Cornflower"), pc("Gray")),
    labels = c("U=U scenario", "No increase ART")) +
  xlab("Year") + ylab("Number of people with HIV") + 
  PlotOptions()

resultsInfects <- ggplot(data = scenarioResultsSims, aes(x = year, y = newInfects, 
  colour = scenario, group = interaction(scenario, simset))) + 
  geom_line() + 
  geom_line(data = (scenarioResultsBest %>% filter(scenario == "base")), 
    aes(group = 1), colour = pc("Blue")) +
  geom_line(data = (scenarioResultsBest %>% filter(scenario == "scenario")), 
    aes(group = 1), colour = pc("Black")) +
  expand_limits(y = c(0, NA)) + 
  scale_x_continuous(breaks = seq(2009, 2019, by = 2)) + 
  scale_colour_manual(name = "", 
    breaks = c("base", "scenario"), 
    values = c(pc("Cornflower"), pc("Gray")),
    labels = c("U=U scenario", "No increase ART")) +
  xlab("Year") + ylab("Annual HIV infections") + 
  PlotOptions()

# Cumulative infections --------------------------------------------------------

cumInfects <- scenarioResultsSims %>% 
  group_by(simset, scenario) %>%
  summarise(infections = sum(newInfects)) %>%
  ungroup()

resultsCumInfects <- ggplot(data = cumInfects, aes(x = scenario, y = infections)) + 
  geom_boxplot(aes(fill = scenario), width = 0.75, alpha = 0.5) +
  scale_fill_manual(
    labels = c("base", "scenario"), 
    values = c(pc("Black"), pc("Cornflower"))) +
  xlab("") + ylab("Cumulative infections") +
  scale_x_discrete(labels = c("U=U scenario", "No increase ART")) +
  expand_limits(y = c(0, NA)) + 
  PlotOptions() + theme(legend.position = "none")

# Histogram of averted infections ----------------------------------------------

avertedInfects <- cumInfects %>% 
  spread(scenario, infections) %>%
  mutate(averted = scenario - base)

resultsAverted <- ggplot(data = avertedInfects, aes(x = averted)) +
  geom_density(alpha = 0.5, fill = pc("Cornflower")) +
  xlab("Infections averted") + ylab("Density") +
  PlotOptions() + theme(legend.position = "none")  

```

```{r Health Economic Calculations}
# This chunk does the health economic calculations -- we apply costs to all 
# diagnosed not just those on ART (conservative costing)

HEresultsBest <- scenarioResultsBest %>% 
  select(scenario, year, diagnosed, newInfects) %>% 
  left_join(costingsBest, by = "year") %>%
  select(-inflation_index, -cumulative_index, -cumulative_index2) %>%
  mutate(
    hc_base = diagnosed * annual_cost,
    hc_adjusted = diagnosed * ac_adjusted,
    hc_adjusted2 = diagnosed * ac_adjusted2,
    lc0 = newInfects * lifetime_cost_0d,
    lc35 = newInfects * lifetime_cost_35d,
    lc50 = newInfects * lifetime_cost_50d,
    lc0_adjusted = newInfects * lc0_adjusted,
    lc35_adjusted = newInfects * lc35_adjusted,
    lc50_adjusted = newInfects * lc50_adjusted,
    lc0_adjusted2 = newInfects * lc0_adjusted2,
    lc35_adjusted2 = newInfects * lc35_adjusted2,
    lc50_adjusted2 = newInfects * lc50_adjusted2)

cumHEresultsBest <- HEresultsBest %>%
  select(-year, -diagnosed) %>%
  group_by(scenario) %>% 
  summarise_all(sum)

HEresultsSims <- tibble()

if (numsims > 1) {
  
  HEresultsSims <- scenarioResultsSims %>% 
    select(scenario, simset, year, diagnosed, newInfects) %>% 
    left_join(costingsBest, by = "year") %>%
    select(-inflation_index, -cumulative_index, -cumulative_index2) %>%
    mutate(
      hc_base = diagnosed * annual_cost,
      hc_adjusted = diagnosed * ac_adjusted,
      hc_adjusted2 = diagnosed * ac_adjusted2,
      lc0 = newInfects * lifetime_cost_0d,
      lc35 = newInfects * lifetime_cost_35d,
      lc50 = newInfects * lifetime_cost_50d,
      lc0_adjusted = newInfects * lc0_adjusted,
      lc35_adjusted = newInfects * lc35_adjusted,
      lc50_adjusted = newInfects * lc50_adjusted,
      lc0_adjusted2 = newInfects * lc0_adjusted2,
      lc35_adjusted2 = newInfects * lc35_adjusted2,
      lc50_adjusted2 = newInfects * lc50_adjusted2)

  cumHEresultsSims <- HEresultsSims %>%
    select(-year, -diagnosed) %>%
    group_by(scenario, simset) %>% 
    summarise_all(sum)
  
}



```


```{r Save project and output}

```


